<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="cmsxh.20131226100304.5349" a="E"><vh>@settings</vh>
<v t="cmsxh.20131226100304.5350"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="cmsxh.20131226100304.5351"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="cmsxh.20140108172857.2428"><vh>CMSimply public version</vh></v>
<v t="cmsxh.20131226100304.3770" a="E"><vh>CMSimply Project</vh>
<v t="cmsxh.20140101145643.1604"><vh>License</vh></v>
<v t="cmsxh.20131226100304.5424"><vh>Delete uploaded files</vh></v>
<v t="cmsxh.20131226100304.5425"><vh>View uploaded files</vh></v>
<v t="cmsxh.20140212132226.1611"><vh>View uploaded images</vh></v>
<v t="cmsxh.20140212132226.1612"><vh>Delete tmp session files</vh></v>
<v t="cmsxh.20131226100304.5426"><vh>about textile</vh></v>
<v t="2014pythonE.20140312072052.1942"><vh>about syntaxhighlight</vh></v>
<v t="2014pythonE.20140424170033.3315"><vh>about duplicate heading</vh></v>
<v t="2014pythonE.20140313091306.1898"><vh>Brython ajax</vh></v>
<v t="2014spring.20140605210826.1877"><vh>errors</vh></v>
<v t="2014pythonE.20140313212213.1898" a="E"><vh>CherryPy ajax example</vh>
<v t="2014pythonE.20140313212213.1899"><vh>another example</vh></v>
<v t="2014pythonE.20140313212213.1902"><vh>reference site</vh></v>
<v t="2014pythonE.20140313212213.1900" a="E"><vh>localStorage</vh>
<v t="2014pythonE.20140313212213.1901"><vh>example</vh></v>
</v>
</v>
<v t="cmsxh.20140212132226.1610"><vh>Error</vh></v>
<v t="2014pythonE.20140420143435.2016" a="E"><vh>OpenjsCAD 模型</vh>
<v t="2014pythonE.20140420143435.2017"><vh>Dodecahedron</vh></v>
<v t="2014pythonE.20140420143435.2018"><vh>axis coupler</vh></v>
<v t="2014pythonE.20140420143435.2019"><vh>cubes</vh></v>
<v t="2014pythonE.20140420143435.2020"><vh>ring</vh></v>
<v t="2014pythonE.20140420143435.2021"><vh>centers</vh></v>
<v t="2014pythonE.20140420143435.2022"><vh>chain hull</vh></v>
<v t="2014pythonE.20140420143435.2023"><vh>colors</vh></v>
<v t="2014pythonE.20140420143435.2024"><vh>example1</vh></v>
<v t="2014pythonE.20140420143435.2025"><vh>example2</vh></v>
<v t="2014pythonE.20140420143435.2026"><vh>example3</vh></v>
<v t="2014pythonE.20140420143435.2027"><vh>example4</vh></v>
<v t="2014pythonE.20140420143435.2028"><vh>example5</vh></v>
<v t="2014pythonE.20140420143435.2029"><vh>expand</vh></v>
<v t="2014pythonE.20140420143435.2030"><vh>gear</vh></v>
<v t="2014pythonE.20140420143435.2031"><vh>iphone4 case</vh></v>
<v t="2014pythonE.20140420143435.2032"><vh>lookup</vh></v>
<v t="2014pythonE.20140420143435.2033"><vh>name plate</vh></v>
<v t="2014pythonE.20140420143435.2034"><vh>polyhedron</vh></v>
<v t="2014pythonE.20140420143435.2035"><vh>primitives</vh></v>
<v t="2014pythonE.20140420143435.2036"><vh>rectangle extrude</vh></v>
<v t="2014pythonE.20140420143435.2037"><vh>rotate extrude</vh></v>
<v t="2014pythonE.20140420143435.2038"><vh>round cube</vh></v>
<v t="2014pythonE.20140420143435.2039"><vh>torus</vh></v>
<v t="2014pythonE.20140420143435.2040"><vh>Transparency</vh></v>
<v t="2014pythonE.20140420143435.2041"><vh>Transparency2</vh></v>
<v t="2014pythonE.20140420143435.2042"><vh>Umbilical Torus</vh></v>
<v t="2014pythonE.20140420143435.2043"><vh>lego man</vh></v>
</v>
</v>
<v t="cmsxh.20131226100304.3660" a="E"><vh>@path ./</vh>
<v t="cmsxh.20131226100304.3661" a="E"
expanded="cmsxh.20131226100304.3682,cmsxh.20131226100304.3709,"><vh>@file application</vh></v>
<v t="cmsxh.20131226100304.3820" a="E"><vh>@path static</vh>
<v t="cmsxh.20131226100304.3821"><vh>@edit cmsimply.css</vh></v>
<v t="cmsxh.20131226100304.3822"><vh>@edit axuploader.js</vh></v>
<v t="2014pythonE.20140312215910.1786"><vh>@edit console.css</vh></v>
<v t="2014pythonE.20140312215910.1787"><vh>@edit brython.css</vh></v>
<v t="2014pythonE.20140312215910.1788"><vh>@edit editor.py</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="2014pythonE.20140312072052.1942">At this moment, the syntaxhighlight cause the Brython error.
When syntaxhighlight return anything but None, error arises.

It is believed that the CherryPy header cause this problem.

According to: http://stackoverflow.com/questions/6054473/python-cherrypy-how-to-add-header

"When you set a status code by raising HTTPError, the headers in cherrypy.response.headers are ignored. Set the HTTP status by setting cherrypy.response.status instead:"

add the following lines into index() to eliminate this problem:

# Yen try
cherrypy.response.headers['Retry-After'] = 60
cherrypy.response.status = 404

According to: http://cherrypy.readthedocs.org/en/latest/tutorial/basics.html

Since "cherrypy.response.headers contains a mapping with the header options that will be returned by the server, before the contents get sent."

The real problem comes from default(), while the CMSimply class operated normally, the default() sent some header message to cause brython not working.

The syntaxhighlight is not the problem anymore.
</t>
<t tx="2014pythonE.20140313091306.1898">&lt;div id="result"&gt;(empty)&lt;/div&gt;
&lt;button id="get_text"&gt;get text file&lt;/button&gt;
&lt;button id="i_dont_exist"&gt;file not found&lt;/button&gt;
&lt;button id="get_test"&gt;GET request&lt;/button&gt;
&lt;button id="post_test"&gt;POST request&lt;/button&gt;
&lt;button id="timeout"&gt;timeout&lt;/button&gt;

&lt;script id="ascript" type="text/python"&gt;
from browser import ajax,doc

def on_complete(req):
    print(req.readyState)
    print('status',req.status)
    if req.status==200 or req.status==0:
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

def err_msg():
    doc["result"].html = "server didn't reply after %s seconds" %timeout

timeout = 4

def go(url):
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('GET',url,True)
    req.send()

def post(url):
    req = ajax.ajax()
    req.bind('complete',on_complete)
    req.set_timeout(timeout,err_msg)
    req.open('POST',url,True)
    req.set_header('content-type','application/x-www-form-urlencoded')
    req.send({'foo':34})

# bindings
doc['get_text'].bind('click',lambda ev:go('ajax_data.txt'))
doc['i_dont_exist'].bind('click',lambda ev:go('i_dont_exist.txt'))
doc['get_test'].bind('click',lambda ev:go('/cgi-bin/get_test.py'))
doc['post_test'].bind('click',lambda ev:post('/cgi-bin/post_test.py'))
doc['timeout'].bind('click',lambda ev:go('/cgi-bin/timeout.py'))
&lt;/script&gt;</t>
<t tx="2014pythonE.20140313212213.1898">import cherrypy
import simplejson

class Root(object):

    @cherrypy.expose
    def update(self):
        cl = cherrypy.request.headers['Content-Length']
        rawbody = cherrypy.request.body.read(int(cl))
        body = simplejson.loads(rawbody)
        # do_something_with(body)
        return "Updated %r." % (body,)

    @cherrypy.expose
    def index(self):
        return """
&lt;html&gt;
&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type='text/javascript'&gt;
function Update() {
    $.ajax({
      type: 'POST',
      url: "update",
      contentType: "application/json",
      processData: false,
      data: $('#updatebox').val(),
      success: function(data) {alert(data);},
      dataType: "text"
    });
}
&lt;/script&gt;
&lt;body&gt;
&lt;input type='textbox' id='updatebox' value='{}' size='20' /&gt;
&lt;input type='submit' value='Update' onClick='Update(); return false' /&gt;
&lt;/body&gt;
&lt;/html&gt;
"""

cherrypy.quickstart(Root())</t>
<t tx="2014pythonE.20140313212213.1899">import cherrypy
import simplejson

class Root:

    @cherrypy.expose
    @cherrypy.tools.json_out()
    @cherrypy.tools.json_in()
    def my_route(self):

        result = {"operation": "request", "result": "success"}

        input_json = cherrypy.request.json
        value = input_json["my_key"]

        #All responses are serialized to JSON. This the same as
        #return simplejson.dumps(result)
        return result
        
Javascript part:

//assuming that you're using jQuery

var myObject = { "my_key": "my_value" };

$.ajax({
    type: "POST",
    url: "my_route",
    data: JSON.stringify(myObject),
    contentType: 'application/json',
    dataType: 'json',
    error: function() {
        alert("error");
    },
    success: function() {
        alert("success");
    }
});</t>
<t tx="2014pythonE.20140313212213.1900">localStorage:

存值：
localStorage.setItem(key,value);

取值：
localStorage.getItem(key);

移除KEY所對應的內容:
localStorage.removeItem(key);

清除所有內容
localStorage.clear();

&lt;script&gt;
    // set an item
    localStorage.setItem('name','goofy');
    // retrieve an item
    alert(localStorage.getItem('name'));
    // empty the localStorage completely
    localStorage.clear();
&lt;/script&gt;

&lt;script "text/javascript"&gt;
    start = new Date().getTime();
    for(i=1;i&lt;=1000;i++)
        localStorage.setItem(i.toString(),'a' * 1024);
    elapsed = ((new Date().getTime()) - start)/1000
    alert(elapsed.toString() + "s");
&lt;/script&gt;

&lt;script&gt;
    for(i=0; i&lt;localStorage.length; i++) {
        key = localStorage.key(i);
        item = localStorage.getItem(key);
        // do something with key and item ...
    }
&lt;/script&gt;</t>
<t tx="2014pythonE.20140313212213.1901">example: http://dreamforce.me/wp-content/dream_demo/html5_localstorage/html5_localDemo/html5_localstorage.html

&lt;!DOCTYPE html&gt; 
&lt;head&gt; 
	&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"/&gt; 
	&lt;title&gt;Cute Bar Demo - SpyreStudios&lt;/title&gt; 
	&lt;script type='text/javascript' src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.js'&gt;&lt;/script&gt; 
	&lt;script type='text/javascript' src='https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.js'&gt;&lt;/script&gt; 
	&lt;script type='text/javascript' src='js/jquery.dataTables.js'&gt;&lt;/script&gt; 
	
	&lt;link href="css/jquery.ui.all.css" rel="stylesheet" type="text/css" media="all"/&gt;
	
	&lt;link href="css/demo_page.css" rel="stylesheet" type="text/css" media="all"/&gt;
	&lt;link href="css/demo_table_jui.css" rel="stylesheet" type="text/css" media="all"/&gt;
	&lt;link href="css/demo_table.css" rel="stylesheet" type="text/css" media="all"/&gt;
	
	&lt;script type='text/javascript'&gt; 
	var currentId = 1;
	var oTable;
    $(document).ready(function(){    
		if (typeof(localStorage) == 'undefined' ) {
			alert('Your browser does not support HTML5 localStorage. Try upgrading.');
		} else {
		try {
		var currentId = localStorage.getItem("currentId")
		if(currentId == null)
		{
		localStorage.setItem("currentId",1);
		currentId = 1;
		}
		  oTable = $('#localDataList').dataTable({
					"bJQueryUI": true,
					"sPaginationType": "full_numbers"
				});
		    addLocalStorageToTabel();		
		} catch (e) {
	 	 if (e == QUOTA_EXCEEDED_ERR) {
	 	 	 alert('Quota exceeded!'); //data wasn't successfully saved due to quota exceed so throw an error
		}
	    }
       }

    });
	
	function getStoredObjIdsArray()
	{
	   var ids = localStorage.getItem("storedObjIds");
	   var idStrArray;
	   if(ids!=null)
		{
        idStrArray = ids.split(",");
		}
		return idStrArray;
	}
	function addLocalStorageToTabel()
	{
	    oTable.fnClearTable();
	    var ids_Array = getStoredObjIdsArray();
		if(ids_Array!=null)
		{
		for ( var j = 0; j &lt; ids_Array.length; j++) {
		    var theId = ids_Array[j];
			var objStr = localStorage.getItem(theId);
			if(objStr != null)
			{
			   var objField = objStr.split("|");
			   addDataToTable(theId,objField[0],objField[1]);
			}
			}
	}
	}
	
	function addDataToTable(id,name,age)
	{
	  var deleteStr = '&lt;a href="javascript:void(0)" onclick="deleteObjStr('+id+');"&gt;delete&lt;/a&gt;';
	  oTable.fnAddData( [
        id,
		name,
		age,
		deleteStr
		] );
	}
	
	function deleteObjStr(id)
	{
	   var objStr = localStorage.getItem(id);
	   if(objStr!=null)
	   {
	       alert(objStr);
	       alert("in");
	       localStorage.removeItem(id);
		   addLocalStorageToTabel();
	   }
	}
	

	
	function setObjStrTolocalStorage() 
	{
	    var name = $("#nameValue").val();
		if(name==null || name=='')
		{
		  alert("please input name value!");
		  return false;
		}
		var age  = $("#ageValue").val();
		if(age==null || age =='')
		{
		  alert("please input age value!");
		  return false;
		}
		if(isNaN(age))
		{
		  alert("the age value must be int type!");
		  return false;
		}
		var id   = localStorage.getItem("currentId");
		localStorage.setItem(id,name+"|"+age);
		var ids = localStorage.getItem("storedObjIds");
		if(ids!=null)
		{
         ids+=","+id;
		}
		else
		{
		  ids = id;
		}
		localStorage.setItem("storedObjIds",ids);
		
		addCurrentIdPoint();
	}
	
	function addDataToLocalStorage()
	{
	    setObjStrTolocalStorage();
		addLocalStorageToTabel();
		$("#addDataToForm").dialog("close")
	 }
	 
	 function addCurrentIdPoint()
	 {
	   var currentId = localStorage.getItem("currentId");	
	   var currentIdInt = parseInt(currentId) + 1;
	   localStorage.setItem("currentId",currentIdInt);
	 }
	 
	function addDataReady()
	{
	  var id   = localStorage.getItem("currentId");
	  $("#currentIdLabel").html("Current ID: "+id);
	  var target = $("#addDataToForm")
	  setDisplayArea(target)
	  $(target).dialog("open");
	}
	
	function setDisplayArea(target, recall) {
	$(target).dialog({
		autoOpen : false,
		width : "auto",
		height : "auto",
		modal : true,
		position : "center",
		beforeClose : recall
	});
}

	&lt;/script&gt; 

&lt;/head&gt; 
&lt;body&gt; 
   &lt;a href="javascript:void(0)" onclick="addDataReady()"&gt;You can add Data Here!&lt;/a&gt;
   &lt;div id="addDataToForm" style="display:none;"&gt;
   &lt;span id="currentIdLabel"&gt;ID:&lt;/span&gt;&amp;nbsp;&lt;span&gt;Name:&lt;input type="text" id="nameValue"&gt;&lt;/span&gt;&amp;nbsp;&lt;span&gt;Age: &lt;input type="text" id="ageValue"&gt;&lt;/span&gt;&amp;nbsp;&lt;span&gt;&lt;a href="javascript:void(0)" onclick="addDataToLocalStorage();"&gt;ADD&lt;/a&gt;&lt;/span&gt;
   &lt;/div&gt;
   &lt;table id="localDataList" style="border:1px solid; width:100%;"&gt;
     &lt;thead&gt;
     &lt;tr id="head"&gt;
	   &lt;td width="20%"&gt;ID&lt;/td&gt;&lt;td width="20%"&gt;Name&lt;/td&gt;&lt;td width="20%"&gt;Age&lt;/td&gt;&lt;td width="40%"&gt;Operation&lt;/td&gt;
	 &lt;/tr&gt;
	 &lt;/thead&gt;
	 &lt;tbody&gt;
	 &lt;tr&gt;
	   &lt;td&gt;ID&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;td&gt;Age&lt;/td&gt;&lt;td&gt;Operation&lt;/td&gt;
	 &lt;/tr&gt;
	 &lt;/tbody&gt;
   &lt;/table&gt;
&lt;/body&gt; 
 
 
&lt;/html&gt; 
</t>
<t tx="2014pythonE.20140313212213.1902">http://ginstrom.com/scribbles/2010/03/07/simple-ajax-with-cherrypy-and-jquery/

minijQyery Lab: http://www.darkthread.net/MiniJQueryLab/
</t>
<t tx="2014pythonE.20140420143435.2016">2014.06.20:

right now the openjscad can only use the following ace.js which is older than ace 1.0.0

https://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js

on https://github.com/ajaxorg/ace-builds/releases we may download the official release version

BTW, /brython can use any ace.js version (the version is package 06.09.2014)</t>
<t tx="2014pythonE.20140420143435.2017">// title: Dodecahedron
// author: OpenSCAD, adapted by Rene K. Mueller

function dodecahedron(h) {  // from http://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Commented_Example_Projects
   var c = cube({ size: [2,2,1], center: true });

   for(var i=0; i&lt;=4; i++) { // loop i from 0 to 4, and intersect results
      // make a cube, rotate it 116.565 degrees around the X axis,
      // then 72*i around the Z axis
      c = c.intersect(
         cube({size: [2,2,1], center: true}).
         rotateX(116.565).
         rotateZ(72*i)
      );
   }
   return scale([h,h,h],c); // scale by height parameter
}

function main() {
   return dodecahedron(30);
}</t>
<t tx="2014pythonE.20140420143435.2018">// title: Axis Coupler
// author: Joost Nieuwenhuijse
// license: MIT License

var cylresolution=16;

// Here we define the user editable parameters: 
function getParameterDefinitions() {
  return [
    {
      name: 'quality', 
      type: 'choice',
      caption: 'Quality',
      values: [0, 1],
      captions: ["Draft","High"], 
      initial: 0
    },    
  
    { name: 'diameter1', caption: 'Axis diameter of first coupler:', type: 'float', initial: 12.2 },
    { name: 'shaftlength1', caption: 'Axis depth of first coupler:', type: 'float', initial: 15 },
    { name: 'outerlength1', caption: 'Outer length of first coupler:', type: 'float', initial: 20 },
    { name: 'nutradius1', caption: 'Nut radius of first coupler:', type: 'float', initial: 4.65 },
    { name: 'nutthickness1', caption: 'Nut thickness of first coupler:', type: 'float', initial: 4.2},
    { name: 'screwdiameter1', caption: 'Screw diameter of first coupler:', type: 'float', initial: 5},
    { name: 'diameter2', caption: 'Axis diameter of second coupler:', type: 'float', initial: 9.5 },
    { name: 'shaftlength2', caption: 'Axis depth of second coupler:', type: 'float', initial: 10 },
    { name: 'outerlength2', caption: 'Outer length of second coupler:', type: 'float', initial: 15 },
    { name: 'nutradius2', caption: 'Nut radius of second coupler:', type: 'float', initial: 3.2 },
    { name: 'nutthickness2', caption: 'Nut thickness of second coupler:', type: 'float', initial: 2.6},
    { name: 'screwdiameter2', caption: 'Screw diameter of second coupler:', type: 'float', initial: 3},
    { name: 'outerdiameter', caption: 'Outer diameter:', type: 'float', initial: 30 },
    { name: 'spiderlength', caption: 'Spider thickness:', type: 'float', initial: 12 },
    { name: 'spidermargin', caption: 'Spider tolerance:', type: 'float', initial: 0 },
    { name: 'numteeth', caption: 'Num teeth per coupler:', type: 'int', initial: 2}
  ];
}

function main(params)
{
  cylresolution=(params.quality == "1")? 64:16;
 
  var outerdiameter=params.outerdiameter;
  outerdiameter=Math.max(outerdiameter, params.diameter1+0.5);
  outerdiameter=Math.max(outerdiameter, params.diameter2+0.5);

  var spidercenterdiameter=outerdiameter/2;
  
  var part1=makeShaft(params.diameter1, outerdiameter,spidercenterdiameter,params.shaftlength1,params.outerlength1,params.spiderlength, params.nutradius1, params.nutthickness1, params.screwdiameter1, params.numteeth);  
  var part2=makeShaft(params.diameter2, outerdiameter,spidercenterdiameter,params.shaftlength2,params.outerlength2,params.spiderlength, params.nutradius2, params.nutthickness2, params.screwdiameter2, params.numteeth);
  var spider=makeSpider(outerdiameter, spidercenterdiameter, params.spiderlength, params.numteeth);
  
  if(params.spidermargin &gt; 0)
  {
    spider=spider.contract(params.spidermargin, 4);
  }
  
  // rotate shaft parts for better 3d printing:
  part1=part1.rotateX(180).translate([0,0,params.outerlength1+params.spiderlength]);
  part2=part2.rotateX(180).translate([0,0,params.outerlength2+params.spiderlength]);
  
  var result=part1.translate([-outerdiameter-5,0,0]);
  result=result.union(part2.translate([0,0,0]));
  result=result.union(spider.translate([outerdiameter+5,0,-params.spidermargin]));
  return result;
}

function makeShaft(innerdiameter, outerdiameter, spidercenterdiameter, shaftlength, outerlength, spiderlength, nutradius, nutthickness, screwdiameter, numteeth)
{
  var result=CSG.cylinder({start:[0,0,0], end:[0,0,outerlength], radius:outerdiameter/2, resolution:cylresolution});
  
  for(var i=0; i &lt; numteeth; i++)
  {
    var angle=i*360/numteeth;
    var pie=makePie(outerdiameter/2, spiderlength,angle-45/numteeth, angle+45/numteeth); 
    pie=pie.translate([0,0,outerlength]);
    result=result.union(pie);
  }
  var spidercylinder=CSG.cylinder({start:[0,0,outerlength], end:[0,0,outerlength+spiderlength],radius:spidercenterdiameter/2,resolution:cylresolution});
  result=result.subtract(spidercylinder);
  var shaftcylinder=CSG.cylinder({start:[0,0,0], end:[0,0,shaftlength], radius:innerdiameter/2, resolution:cylresolution});
  result=result.subtract(shaftcylinder);
  
  var screwz=shaftlength/2;
  if(screwz &lt; nutradius) screwz=nutradius;  
  var nutcutout = hexagon(nutradius, nutthickness).translate([0,0,-nutthickness/2]);
  var grubnutradiusAtFlatSide = nutradius * Math.cos(Math.PI / 180 * 30);
  var nutcutoutrectangle = CSG.cube({
    radius: [outerlength/2, grubnutradiusAtFlatSide, nutthickness/2],
    center: [outerlength/2, 0, 0]
  });
  nutcutout = nutcutout.union(nutcutoutrectangle);
  nutcutout = nutcutout.rotateY(90);
  nutcutout = nutcutout.translate([(outerdiameter+innerdiameter)/4, 0, screwz]);
  result = result.subtract(nutcutout);
  
  var screwcutout=CSG.cylinder({
    start: [outerdiameter/2, 0, screwz],
    end: [0, 0, screwz],
    radius: screwdiameter/2, 
    resolution:cylresolution
  });
  result=result.subtract(screwcutout);
  
//return nutcutout; 
//  nutcutout = nutcutout.translate([-grubnutheight/2 - centerholeradius - nutdistance,0,0]);
  
  return result;
}

function makePie(radius, height, startangle, endangle)
{
  var absangle=Math.abs(startangle-endangle);
  if(absangle &gt;= 180)
  {
    throw new Error("Pie angle must be less than 180 degrees");
  }
  var numsteps=cylresolution*absangle/360;
  if(numsteps &lt; 1) numsteps=1;
  var points=[];
  for(var i=0; i &lt;= numsteps; i++)
  {
    var angle=startangle+i/numsteps*(endangle-startangle);
    var vec = CSG.Vector2D.fromAngleDegrees(angle).times(radius);
    points.push(vec);    
  }
  points.push(new CSG.Vector2D(0,0));
  var shape2d=new CSG.Polygon2D(points);
  var extruded=shape2d.extrude({
    offset: [0,0,height]   // direction for extrusion
  });
  return extruded;  
}

function hexagon(radius, height)
{
  var vertices=[];
  for(var i=0; i &lt; 6; i++)
  {
    var point=CSG.Vector2D.fromAngleDegrees(-i*60).times(radius).toVector3D(0);
    vertices.push(new CSG.Vertex(point));
  }
  var polygon=new CSG.Polygon(vertices);
  var hex=polygon.extrude([0,0,height]);
  return hex;
}

function makeSpider(outerdiameter, spidercenterdiameter, spiderlength, numteeth)
{
  var result=new CSG();
  var numspiderteeth=numteeth*2; // spider has twice the number of teeth
  for(var i=0; i &lt; numspiderteeth; i++)
  {
    var angle=i*360/numspiderteeth;
    var pie=makePie(outerdiameter/2, spiderlength,angle-90/numspiderteeth, angle+90/numspiderteeth); 
    pie=pie.translate([0,0,0]);
    result=result.union(pie);
  }

  var centercylinder=CSG.cylinder({start:[0,0,0], end:[0,0,spiderlength], radius:spidercenterdiameter/2, resolution:cylresolution});
  result=result.union(centercylinder);

  return result;
}
</t>
<t tx="2014pythonE.20140420143435.2019">// title: Bunch of Cubes
// author: Rene K. Mueller
// license: MIT License
// description: creating 100 cubes in space ...

var cubes = new Array();

function main() {
   for(var i=0; i&lt;100; i++) {
      cubes[i] = translate([
         150*Math.random()-75,
         150*Math.random()-75,
         150*Math.random()-75],
         cube(5).
            setColor(hsl2rgb(Math.random()*0.2+0.7,1,0.5)));
   }
   return cubes;
}</t>
<t tx="2014pythonE.20140420143435.2020">// title: Celtic Knot Ring
// author: Joost Nieuwenhuijse
// license: MIT License
// tags: Catmull Spline

// -*- mode: javascript; -*-


'use strict';

function getParameterDefinitions() {
  return [
    {
      name: 'hisorhers', 
      type: 'choice',
      caption: 'For Daniel or Zette:',
      values: [0, 1],
      captions: ["Dan", "Suzette"], 
      initial: 0
    }
   ];
}


var his = true;


var debugcount = 10;
function debugprint () {
    if (debugcount-- &gt; 0) {
    try {
        console.log(arguments);
    } catch (err) {
        //
    }
    }
}


// interpolate between v2 and v3, at time u
function catmullRom(v1, v2, v3, v4, u) {
    var c1x,c2x,c3x,c4x, resX;
    var c1y,c2y,c3y,c4y, resY;
    var c1z,c2z,c3z,c4z, resZ;

    // Coefficients for Matrix M
    // these should all be const, but MSIE doens't handle that
    var M11 = 0.0;
    var M12 = 1.0;
    var M13 = 0.0;
    var M14 = 0.0;
    var M21 =-0.5;
    var M22 = 0.0;
    var M23 = 0.5;
    var M24 = 0.0;
    var M31 = 1.0;
    var M32 =-2.5;
    var M33 = 2.0;
    var M34 =-0.5;
    var M41 =-0.5;
    var M42 = 1.5;
    var M43 =-1.5;
    var M44 = 0.5;
    
    c1x =            M12*v2.x;
    c2x = M21*v1.x            + M23*v3.x;
    c3x = M31*v1.x + M32*v2.x + M33*v3.x + M34*v4.x;
    c4x = M41*v1.x + M42*v2.x + M43*v3.x + M44*v4.x;
    
    c1y =            M12*v2.y;
    c2y = M21*v1.y            + M23*v3.y;
    c3y = M31*v1.y + M32*v2.y + M33*v3.y + M34*v4.y;
    c4y = M41*v1.y + M42*v2.y + M43*v3.y + M44*v4.y;
    
    c1z =            M12*v2.z;
    c2z = M21*v1.z            + M23*v3.z;
    c3z = M31*v1.z + M32*v2.z + M33*v3.z + M34*v4.z;
    c4z = M41*v1.z + M42*v2.z + M43*v3.z + M44*v4.z;
    
    resX = (((c4x*u + c3x)*u +c2x)*u + c1x);
    resY = (((c4y*u + c3y)*u +c2y)*u + c1y);
    resZ = (((c4z*u + c3z)*u +c2z)*u + c1z);
    
    return new CSG.Vector3D(resX, resY, resZ);
}

var tiny = 0.0000001;

function catmullRomWithTangent(v1, v2, v3, v4, u) {
    var res1, res2, tangent;
    if ((u+tiny) &lt;= 1) {
    res1 = catmullRom(v1, v2, v3, v4, u) ;
    res2 = catmullRom(v1, v2, v3, v4, u+tiny) ;
    tangent = res2.minus(res1).unit();
    return [res1, tangent];
    } else {
    res1 = catmullRom(v1, v2, v3, v4, u-tiny) ;
    res2 = catmullRom(v1, v2, v3, v4, u) ;
    tangent = res2.minus(res1).unit();
    return [res2, tangent];
    }
}



// create a CSG by dragging a CAG along a Catmull-Rom spline
// where the 'top' of the CAG is 'up' and 'sideways' of
// the CAG are perpendicular to 'up' and the spline tangent


function splineExtrude(vCP, numInterps, up, 
               cag, transform) {
    var polygons = [];
    var splinePointsAndTangents = [];
    // corners is an array of arrays

    // corners [j] corresponds to the array of all points on the
    // spline with the offset of cag.sides[j].vertex0
    
    // corners[j][i] is the i'th interpolated point on the master
    // spline, plus the offset of cag.sides[j].vertex0

    var corners = [];
    var nSides = cag.sides.length;

    for (i=0; i&lt; nSides; i++) {
    corners.push([]);
    }

    if (typeof(transform) != 'function') {
    transform = function(e) { return e; };
    }
    
    // fencepost - do the zeroth point of the zeroth segment
    splinePointsAndTangents.push(catmullRomWithTangent(vCP[0],vCP[0+1],
                               vCP[0+2],vCP[0+3],0));
    for (var j = 0; j &lt;= vCP.length-4; j++) {
    // don't do the zeroth point, because it's the same as the
    // last point of the previous segment
    for (var i = 1; i &lt;= numInterps; i++) {
        var u = i/numInterps;
        splinePointsAndTangents.push(catmullRomWithTangent(vCP[j],vCP[j+1],
                                   vCP[j+2],vCP[j+3],u));
    }
    }
    

    for (var m=0; m &lt; splinePointsAndTangents.length; m++) {
    var sideways = up.cross(splinePointsAndTangents[m][1]);
    for (var n = 0; n &lt; nSides; n++) {
        corners[n].push(transform(splinePointsAndTangents[m][0]
                      .plus(sideways.times(cag.sides[n].vertex0.pos.x))
                      .plus(up.times(cag.sides[n].vertex0.pos.y))));
        
        // vertex1 should be the same as vertex0 of the next side,
        // so I don't need to handle it here
    }
    }
    var shared = CSG.Polygon.defaultShared;
    
    var start = 0;
    var end = corners[0].length-1;
    var nCorners = corners[0].length;

    

    //start cap
    var startCap = [];
    for (var p =nSides-1; p&gt;=0; p--) {
    startCap.push(corners[p][start]);
    }
    polygons.push(CSG.Polygon.createFromPoints(startCap, shared));

//    polygons.push(CSG.Polygon.createFromPoints([corners4[start],corners3[start],
//                        corners2[start],corners1[start]],
//                           shared));
    for (var q = start; q &lt; end; q++) { 

    // This is done as triangles, (rather than rectangles) because
    // at points on the spline with high curvature, the inside
    // corners can become twisted, which messes up the
    // renderer. What I don't know is what happens when such a
    // file is converted to STL and sent to a 3D printer.  

    // In the words of Shapeways, it makes the printer cry.

    for (var r = 0; r &lt; nSides; r++) {

        polygons.push(CSG.Polygon.createFromPoints([corners[r][q],  corners[(r+1)%nSides][q],
                                                corners[r][q+1]],
                                shared));
        polygons.push(CSG.Polygon.createFromPoints([              corners[(r+1)%nSides][q],
                                corners[(r+1)%nSides][q+1],corners[r][q+1]],
                               shared));
    }
    }
    var endCap = [];
    for (var s =0; s&lt; nSides; s++) {
    endCap.push(corners[s][end]);
    }
    polygons.push(CSG.Polygon.createFromPoints(endCap, shared));

    return CSG.fromPolygons(polygons);
}


var controlPoints = 
    [
    [0,     0,  1, 1],   //over across the middle
    [10,  10, -1, 0],  //under the first cross
    [20,  20,  1, 1],   //over the second cross
//  [30,  24,  0, 0],   //curving into the corner
    [39,  27.25,  0, 1],   // the sharp corner
//  [32,  12,  0, 0],
    [30,  10, -1, 0],
//  [28,  8,   0, 0],  
    [20,  3.75,   0, 0],  // bottom of loop under the corner
    [10,  10,  1, 1],
    [4,   20,  0, 0], // grand curve near the sharp corner (under the long arc)
////    [6,   26,  0, 0],
//  [8,   28,  0, 0],
    [10,  30, -1, 0],
    [24,  34,  0, 0],
//  [30,  35,  0, 0], // top of the long arc
    [40,  34,  0, 0],
    [50,  30,  1, 1], // about where the long arc crosses over
//  [58,  22,  0, 0], 
    [60,  20, -1, 0],
    [70,  10,  1, 1],
    [75,  5,  0, 0],
    [80,  0,  -1, 0]
//  [79.9, .1, -1, 0]   // under the middle (2 cycles right)
//  [79.95, .05, -1, 0]   // under the middle (2 cycles right)
];

var numberOfPatterns = 11;
var circumference = 40 * numberOfPatterns;
var radius = circumference / 2 / Math.PI;
var targetCircumference = his?54.3:56.3;


function main (params) {
    his = (params.hisorhers != 1);
    targetCircumference = his?54.3:56.3;

    var up = new CSG.Vector3D(0,0,1);
    var flipCP = controlPoints.slice();
    flipCP.reverse();
    flipCP = flipCP.map(function(elt) { return ([elt[0]*-1, elt[1]*-1, 
                         elt[2],    elt[3]]); });
    // delete the repeated 0,0 point;
    controlPoints.shift();
    controlPoints = flipCP.concat(controlPoints);
    if (!his) {
    controlPoints = controlPoints.map(function(elt) { 
        return ([elt[0], elt[1]*-1, 
             elt[2]*-1,    elt[3]]); });
    }
    var splines = [];
    var lastPoint ;
    var tripleCP = [];
    // one extra cycle before and after
    for (var i=-1; i&lt;numberOfPatterns+1; i++) {
//    for (var i=-1; i&lt;4+1; i++) {
    tripleCP = tripleCP.concat(controlPoints.map(
        function(elt) { return ([elt[0]+(i*160), elt[1], 
                     elt[2], elt[3]]); }));
    // delete final point so it's not duplicated
    lastPoint = tripleCP.pop();
    }
    // put final point back after the last spline
    tripleCP.push(lastPoint);

    // delete all but last two points of the extra cycle 
    // ie. the start/end point and the extra control point
    for (var t=0; t &lt; controlPoints.length-2; t++) {
    tripleCP.pop();
    tripleCP.shift();
    }

    debugprint(tripleCP);
    var vCP = tripleCP.map(function(e) {
    return new CSG.Vector3D(e[0],e[1],e[2]); 
    });

    var shape1 = CAG.fromPoints([[-4,0], 
                 [-4,5.0], [-1.5,8.5],  
                 [1.55,8.5], [4, 5.0], 
                 [4,0]]);

    // var shape1 = CAG.fromPoints([[-2.75,0], [0,2.75], [2.75,0]]);
    splines.push(splineExtrude(vCP, 11, up, shape1, transformVec3DtoRingSpace));
//        splines.push(splineExtrude(vCP, 11, up, shape1));
    var csg = new CSG();
    for (var u=0; u &lt; splines.length; u++) {
    csg = csg.union(splines[u]);
    }

    csg = csg.transform(CSG.Matrix4x4.rotationX(90));
    csg = csg.scale(targetCircumference/circumference);    
    return csg;

// 7.5 ring size is 17.7 mm diameter 55.7mm circumference
// my guess as to my own ring size is 54mm

// augh! the pass-under bits are 1 pre-scaled unit narrower 
// (after scaling, about 1/8 mm, so .4 mm in extra circumference.
}

function transformVec3DtoRingSpace (vec) {
    var m = new CSG.Matrix4x4();

    m = m.multiply(CSG.Matrix4x4.translation([-vec.x, 0, radius]));
    m = m.multiply(CSG.Matrix4x4.rotationY(360*(vec.x)/circumference));
    var res = vec.transform(m);
    return res;
}

// Question: polygons are supposed to be coplanar vertices, but after
// being transformed into ring space, are 4 coplanar vertices still
// always coplanar?  I'm pretty sure the answer is 'No'.  Does this matter?
// I think yes.  So I can generate triangles instead, easily enough.
// Excpet the end caps... which for my model are not actually rotated, 
// because they are at the origin or exactly 11 loops away.


</t>
<t tx="2014pythonE.20140420143435.2021">// title: Center
// author: Rene K. Mueller
// description: testing all the different options of the OpenSCAD-like OpenJSCAD functions (aside of the strict object oriented approaches)

function main() {
   var o = [];

   pos = function(p) {
      o.push(
         union(
            cube({size: [2,0.05,0.05], center: [false,true,true]}).setColor(1,0,0), 
            cube({size: [2,0.05,0.05], center: [false,true,true]}).setColor(1,0,0).rotateY(-90), 
            cube({size: [2,0.05,0.05], center: [false,true,true]}).setColor(1,0,0).rotateZ(90), 
            p
         )
      );
   }
   pos(cube());
   pos(cube(1.5));
   pos(cube({size: 0.8}));
   pos(cube({size: [1,2,3]}));
   pos(cube({size: [1,2,3], center: true}));
   pos(cube({size: [1,2,3], center: [true,true,false]}));
   pos(cube({size: [1,2,3], round: true, center: [true,true,false]}));
   pos(cube({size: [1,2,3], round: true, center: [true,true,false]}).setColor(1,1,0));

   pos(sphere());
   pos(sphere(0.8));
   pos(sphere({r: 1.1}));
   pos(sphere({r: 1, center: false}));
   pos(sphere({r: 1, center: [true, true, false]}));
   pos(sphere({r: 1, fn: 10}));
   pos(sphere({r: 1, fn: 32}).setColor([1,1,0]));
   pos(cube({size: 0.01, center: true}));
   
   pos(cylinder());
   pos(cylinder({r:1, h: 4}));
   pos(cylinder({r:1, h: 4, center: true}));
   pos(cylinder({r:1, h: 4, center: [true,true,false]}));
   pos(cylinder({r1:1, r2:0, h: 4, center: [false,false,true]}));
   pos(cylinder({r: 1, start: [0,0,0], end:[1,1,4], center: [true,true,false]}));
   pos(color("yellow",cylinder({r: 1, start: [0,0,0], end:[1,1,4], center: [true,true,false]})));
   pos(cube({size: 0.01, center: true}));

   for(var i=0; i&lt;o.length; i++) {
      o[i] = o[i].translate([(i%8)*3,Math.floor(i/8)*4,0]);
   }

   return o;
}
</t>
<t tx="2014pythonE.20140420143435.2022">// title: Chain Hull
// author: Rene K. Mueller
// date: 2013/04/18
// description: Whosa whatsis suggested "Chain Hull" as described at 
//    https://plus.google.com/u/0/105535247347788377245/posts/aZGXKFX1ACN

function main() {
   var o = [], p = [];
   
   for(var i=0; i&lt;12; i++) {           // -- shell like
      var x = sin(i/12*180)*10;
      var y = cos(i/12*180)*10;
      o.push(circle({center: true}).scale(6-i/2).translate([x,y,0]));
   }

   var n = 6;
   for(var i=0; i&lt;n; i++) {            // -- hexagon chain hulled
      var x = sin(i/n*360)*10;
      var y = cos(i/n*360)*10;
      p.push(circle({center: true}).translate([x,y,0]));
   }

   return [
      linear_extrude({height: 5}, chain_hull(o)).translate([-20,0,0]), 
      chain_hull(o), 
      union(o).translate([20,0,0]),

      linear_extrude({height: 5}, chain_hull({closed: true}, p)).translate([-25,40,0]), 
      chain_hull({closed: true}, p).translate([0,40,0]),
      union(p).translate([25,40,0])
   ];
}
</t>
<t tx="2014pythonE.20140420143435.2023">// title: Colors
// author: Rene K. Mueller
// license: MIT License
// tags: RGB, RGBA

function spread() {
   var a = Array.prototype.slice.call(arguments);
   var p = null;
   var type = 'linear';
   var spacing = 1;
   
   if(a[0].type) p = a.shift();        // first argument { type: 'something' }?
   if(a[0].length) a = a[0];           // element is an array?
   if(p&amp;&amp;p.type) type = p.type;
   if(p&amp;&amp;p.spacing) spacing = p.spacing;
   
   if(type=='circular') {
      ;
      
   } else {
      var rows = Math.floor(Math.sqrt(a.length));
      if(p&amp;&amp;p.rows) rows = p.rows;
      if(rows&lt;1) rows = 1;
      for(i=0; i&lt;a.length; i++) {
         a[i] = a[i].translate([(i%rows)*spacing,Math.floor(i/rows)*spacing,0]);
      }
   }
   return a;
}

function main() {
   var o = [];
   
   o.push( color([1,0,0],sphere()) );
   o.push( color([0,1,0],cube()) );
   o.push( color([0,0,1],cylinder()) );

   o.push( color("red",sphere()) );
   o.push( color("green", cube()) );
   o.push( color("blue", cylinder()) );

   for(var i=0; i&lt;1; i+=1/12) {
      o.push( cube().setColor(hsl2rgb(i,1,0.5)) );
   }
   return spread({type: 'linear', spacing: 3, rows: 3}, o);
}
</t>
<t tx="2014pythonE.20140420143435.2024">// title: Example 001
// author: OpenSCAD.org
// description: example001.scad ported to OpenJSCAD.org

function r_from_dia(d) { return d / 2; }

function rotcy(rot, r, h) {
	return rotate(90, rot,
		cylinder({r: r, h: h, center: true}));
}

function example001() {
	var size = 50;
	var hole = 25;
	var cy_r = r_from_dia(hole);
	var cy_h = r_from_dia(size * 2.5);

	return difference(
		sphere({r: r_from_dia(size)}),
		rotcy([0, 0, 0], cy_r, cy_h),
		rotcy([1, 0, 0], cy_r, cy_h),
		rotcy([0, 1, 0], cy_r, cy_h)
	);
}

function main() {
	return example001();
}
</t>
<t tx="2014pythonE.20140420143435.2025">// title: Example 002
// author: OpenSCAD.org
// description: example001.scad ported to OpenJSCAD.org

function example002() {
	return intersection(
		difference(
			union(
				cube({size: [30, 30, 30], center: true}),
				translate([0, 0, -25],
					cube({size: [15, 15, 50], center: true}))
			),
			union(
				cube({size: [50, 10, 10], center: true}),
				cube({size: [10, 50, 10], center: true}),
				cube({size: [10, 10, 50], center: true})
			)
		),
		translate([0, 0, 5],
			cylinder({h: 50, r1: 20, r2: 5, center: true}))
	);
}

function main() {
  return example002();
}
</t>
<t tx="2014pythonE.20140420143435.2026">// title: Example 003
// author: OpenSCAD.org
// description: example001.scad ported to OpenJSCAD.org

function example003() {
	return difference(
		union(
			cube({size: [30, 30, 30], center: true}),
			cube({size: [40, 15, 15], center: true}),
			cube({size: [15, 40, 15], center: true}),
			cube({size: [15, 15, 40], center: true})
		),
		union(
			cube({size: [50, 10, 10], center: true}),
			cube({size: [10, 50, 10], center: true}),
			cube({size: [10, 10, 50], center: true})
		)
	);
}

function main() {
   return example003();
}</t>
<t tx="2014pythonE.20140420143435.2027">// title: Example 004
// author: OpenSCAD.org
// description: example001.scad ported to OpenJSCAD.org

function example004() {
	return difference(
		cube({size: 30, center: true}),
		sphere(20)
	);
}

function main() {
   return example004();
}
</t>
<t tx="2014pythonE.20140420143435.2028">// title: Example 005
// author: OpenSCAD.org
// description: example001.scad ported to OpenJSCAD

function example005() {
   var cy = new Array();
   for(var i = 0; i&lt;=5; i++) {
      //echo(360*i/6, sin(360*i/6)*80, cos(360*i/6)*80);
      cy[i] = translate([sin(360*i/6)*80, cos(360*i/6)*80, 0 ],
         cylinder({h: 200, r: 10}));
   }
   return translate([0, 0, -120],
      union(
         difference(
            cylinder({h: 50, r: 100}),
            translate([0, 0, 10], cylinder({h: 50, r: 80})),
            translate([100, 0, 35], cube({size: 50, center: true}))
         ),
         cy,
         translate([0, 0, 200],
            cylinder({h: 80, r1: 120, r2: 0}))
      )
   );
}

function main() {
   return example005().scale(1/3);
}</t>
<t tx="2014pythonE.20140420143435.2029">// title: Expand()

function main() {
   return union(
      expand(0.2,8, 
         difference(cube(2),translate([0.3,-0.3,0.3], cube(2)))),
         difference(cube(2),translate([0.3,-0.3,0.3], cube(2))).translate([-4,0,0]),
      
      expand(0.3,8, cube(2)).translate([0,-3,0]),
         cube(2).translate([-4,-3,0]),

      expand(0.3,4, cylinder({r: 1, h: 2, fn: 16})).translate([0,4,0]),
         cylinder({r: 1, h: 2}).translate([-4,4,0])
   ).scale(10);
}</t>
<t tx="2014pythonE.20140420143435.2030">// title: Gear
// author: Joost Nieuwenhuijse
// license: MIT License

// Here we define the user editable parameters: 
function getParameterDefinitions() {
  return [
    { name: 'numTeeth', caption: 'Number of teeth:', type: 'int', initial: 10 },
    { name: 'circularPitch', caption: 'Circular pitch:', type: 'float', initial: 5 },
    { name: 'pressureAngle', caption: 'Pressure angle:', type: 'float', initial: 20 },
    { name: 'clearance', caption: 'Clearance:', type: 'float', initial: 0 },
    { name: 'thickness', caption: 'Thickness:', type: 'float', initial: 5 },
    { name: 'centerholeradius', caption: 'Radius of center hole (0 for no hole):', type: 'float', initial: 2 }
  ];
}

// Main entry point; here we construct our solid: 
function main(params)
{
  var gear = involuteGear(
    params.numTeeth,
    params.circularPitch,
    params.pressureAngle,
    params.clearance,
    params.thickness
  );
  if(params.centerholeradius &gt; 0)
  {
    var centerhole = CSG.cylinder({start: [0,0,-params.thickness], end: [0,0,params.thickness], radius: params.centerholeradius, resolution: 16});
    gear = gear.subtract(centerhole);
  }
  return gear;
}

/*
  For gear terminology see: 
    http://www.astronomiainumbria.org/advanced_internet_files/meccanica/easyweb.easynet.co.uk/_chrish/geardata.htm
  Algorithm based on:
    http://www.cartertools.com/involute.html

  circularPitch: The distance between adjacent teeth measured at the pitch circle
*/ 
function involuteGear(numTeeth, circularPitch, pressureAngle, clearance, thickness)
{
  // default values:
  if(arguments.length &lt; 3) pressureAngle = 20;
  if(arguments.length &lt; 4) clearance = 0;
  if(arguments.length &lt; 4) thickness = 1;
  
  var addendum = circularPitch / Math.PI;
  var dedendum = addendum + clearance;
  
  // radiuses of the 4 circles:
  var pitchRadius = numTeeth * circularPitch / (2 * Math.PI);
  var baseRadius = pitchRadius * Math.cos(Math.PI * pressureAngle / 180);
  var outerRadius = pitchRadius + addendum;
  var rootRadius = pitchRadius - dedendum;

  var maxtanlength = Math.sqrt(outerRadius*outerRadius - baseRadius*baseRadius);
  var maxangle = maxtanlength / baseRadius;

  var tl_at_pitchcircle = Math.sqrt(pitchRadius*pitchRadius - baseRadius*baseRadius);
  var angle_at_pitchcircle = tl_at_pitchcircle / baseRadius;
  var diffangle = angle_at_pitchcircle - Math.atan(angle_at_pitchcircle);
  var angularToothWidthAtBase = Math.PI / numTeeth + 2*diffangle;

  // build a single 2d tooth in the 'points' array:
  var resolution = 5;
  var points = [new CSG.Vector2D(0,0)];
  for(var i = 0; i &lt;= resolution; i++)
  {
    // first side of the tooth:
    var angle = maxangle * i / resolution;
    var tanlength = angle * baseRadius;
    var radvector = CSG.Vector2D.fromAngle(angle);    
    var tanvector = radvector.normal();
    var p = radvector.times(baseRadius).plus(tanvector.times(tanlength));
    points[i+1] = p;
    
    // opposite side of the tooth:
    radvector = CSG.Vector2D.fromAngle(angularToothWidthAtBase - angle);    
    tanvector = radvector.normal().negated();
    p = radvector.times(baseRadius).plus(tanvector.times(tanlength));
    points[2 * resolution + 2 - i] = p;
  }

  // create the polygon and extrude into 3D:
  var tooth3d = new CSG.Polygon2D(points).extrude({offset: [0, 0, thickness]});

  var allteeth = new CSG();
  for(var j = 0; j &lt; numTeeth; j++)
  {
    var ang = j*360/numTeeth;
    var rotatedtooth = tooth3d.rotateZ(ang);
    allteeth = allteeth.unionForNonIntersecting(rotatedtooth);
  }

  // build the root circle:  
  points = [];
  var toothAngle = 2 * Math.PI / numTeeth;
  var toothCenterAngle = 0.5 * angularToothWidthAtBase; 
  for(var k = 0; k &lt; numTeeth; k++)
  {
    var angl = toothCenterAngle + k * toothAngle;
    var p1 = CSG.Vector2D.fromAngle(angl).times(rootRadius);
    points.push(p1);
  }

  // create the polygon and extrude into 3D:
  var rootcircle = new CSG.Polygon2D(points).extrude({offset: [0, 0, thickness]});

  var result = rootcircle.union(allteeth);

  // center at origin:
  result = result.translate([0, 0, -thickness/2]);

  return result;
}
</t>
<t tx="2014pythonE.20140420143435.2031">// title: iPhone 4 Dock
// author: Joost Nieuwenhuijse

/*

OpenJsCad script for iPhone 4 dock
Note: not tried printing yet, not sure if it really wil fit.

To create the STL file, launch Google Chrome and go to:
http://joostn.github.com/OpenJsCad/processfile.html or http://openjscad.org

Then drag&amp;drop this file into the page

OpenJsCad is an open source 3d solid modeling tool using JavaScript.
For more information see http://joostn.github.com/OpenJsCad

*/

function getParameterDefinitions() {
  return [
    {
      name: 'quality', 
      type: 'choice',
      caption: 'Quality:',
      values: ["draft", "smooth", "supersmooth"],
      captions: ["Draft (no rounded corners)", "Smooth (rounded corners)", "Super smooth (rounded corners)"], 
      initial: "draft"
    },
    {
      name: 'iphonemargin', 
      type: 'float', 
      initial: 0.5,
      caption: "Margin around iphone (in mm):"
    },
    {
      name: 'plugmargin', 
      type: 'float', 
      initial: 0.25,
      caption: "Margin around dock connector (in mm):"
    },
    { name: 'mouseear', caption: 'Add mouse ear:', type: 'choice', values: [0, 1], initial: 1, captions: ["No", "Yes"]}
  ];
}

function main(params)
{  
  var resolution = 16;  // resolution for all the curved surfaces
  var smoothing = (params.quality != "draft"); // set to false during development, for fast rendering
  var draft = (params.quality != "supersmooth");     // set to false for high resolution smoothing, rendering will take several minutes!

  var x1=40, x2=25, x3=8;
  var y1=35, y2=y1+8, y3=y2+25;
  var frontheight = 30;
  
  // Build the base from two 2D polygons:
  var base1=new CSG.Polygon2D([[0,0],[x1,0],[x1,y1],[x2,y2],[0,y2]]);
  var base2=new CSG.Polygon2D([[0,y2],[x2,y2],[x3,y3],[0,y3]]);
  var extruded1=base1.extrude({offset: [0, 0,frontheight]});
  var extruded2=base2.extrude({offset: [0, 0,frontheight]});
  // We now have the right half; mirror to create the left half:
  extruded1 = extruded1.union(extruded1.mirroredX());
  extruded2 = extruded2.union(extruded2.mirroredX());
  var base = extruded1.union(extruded2);
  
  // Make the top back surface slightly slanted:
  var backtopplane = CSG.Plane.fromNormalAndPoint([0, 8, 10], [0, y2, frontheight]);
  base = base.cutByPlane(backtopplane);
  
  // Make the front surface slightly slanted:
  var frontplane = CSG.Plane.fromNormalAndPoint([0, -10, 2], [0, 0, 0]);
  base = base.cutByPlane(frontplane);
  
  // Add a CSG.Connector to the base, at the point where the iphone should
  // rest in the base. The connector's axis points upwards and its normal
  // points towards the front:
  var recessionDepth = 10;
  var distanceFromFront = 20;
  var angle = 15;
  base.properties.iphoneConnector = new CSG.Connector(
    [0, distanceFromFront, frontheight - recessionDepth],  // the point
    [0, 0, 1],  // axis vector
    [1, 0, 0]  // normal vector
  );
  // rotate the base.properties.iphoneConnector, so that the iphone will be tilted: 
  var rotmaxtrix = CSG.Matrix4x4.rotation(base.properties.iphoneConnector.point, [1, 0, 0], angle);
  base.properties.iphoneConnector = base.properties.iphoneConnector.transform(rotmaxtrix);
   
  // Create iphone placeholder (it's just a cube with the iphone's dimensions):
  var iphoneradius = new CSG.Vector3D(58.6/2 + params.iphonemargin, 9.4/2 + params.iphonemargin, 115/2); 
  var iphone = CSG.cube({radius: iphoneradius});
  
  // Create the little tab behind the iphone:
  var tabradius = new CSG.Vector3D(15, 5, 12); 
  var tab = CSG.cube({radius: tabradius});
  tab = tab.translate([0, (iphoneradius.y+tabradius.y), (-iphoneradius.z+tabradius.z)]);
  
  // Add a CSG.Connector to the iphone's properties. This is the place where the 
  // 30 pin dock plug will snap in. In this case it is the center of the bottom
  // Z plane of the cube. Since the cube already has 6 predefined connectors
  // at the center of each face, we can just use one of those instead of creating
  // a new CSG.Connector:
  iphone.properties.dockConnector = iphone.properties.cube.facecenters[5];

  // transform the iphone so it sits in the base:
  var iphoneTransformation = iphone.properties.dockConnector.getTransformationTo(base.properties.iphoneConnector, true, 0); 
  iphone = iphone.transform(iphoneTransformation);
  
  // transform the tab so it stays behind the iphone: 
  tab = tab.transform(iphoneTransformation);

  // and add the tab to the base:  
  base = base.union(tab);  

  // build the iphone plug:
  var plug = getIphoneDockConnector(params.plugmargin, resolution);
  
  // The plug has a predefined Connector plug.properties.iphoneConnector
  // To attach the plug to the iphone we connect plug.properties.iphoneConnector
  // to iphone.properties.dockConnector
  plug = plug.connectTo(plug.properties.iphoneConnector, 
    iphone.properties.dockConnector, true, 0);
  
  // We must make sure we can pull the USB cable through the dock. So there needs 
  // to be space for the plug. We just create a tall cube with the size of the USB
  // plug (8 by 40 mm), which will be subtracted from the dock's shape:
  var gapForUsbPlug = CSG.cube({radius: [8, 4, 40]});
  
  // Align it to the plug. Again, since gapForUsbPlug is a CSG.cube it already
  // has predefined CSG.Connectors at every face. Connect the Z face to the iphone: 
  gapForUsbPlug = gapForUsbPlug.connectTo(gapForUsbPlug.properties.cube.facecenters[5], 
    iphone.properties.dockConnector, true, 0);
  
//  return plug.union(iphone).union(gapForUsbPlug);
  
  //var cutout = plug.union(iphone).union(gapForUsbPlug);
  //return cutout;
  
  base = base.subtract(iphone);
  
  // make the cutout for the cable:
  var cablewidth = 3;
  var cableheight = 4; 
  var bottomplane = CSG.Plane.fromNormalAndPoint([0, 0, -1], [0, 0, 0]);
  var cableline = plug.properties.cableConnector.axisLine();
  var cableexitpoint = bottomplane.intersectWithLine(cableline);
  var cableentrypoint = new CSG.Vector3D(0, y3, 0);

  var cablepath = new CSG.Path2D([[cableentrypoint.x, cableentrypoint.y], [cableexitpoint.x, cableexitpoint.y]], false);
  var cablecutout = cablepath.rectangularExtrude(cablewidth, cableheight, resolution, false);
  
  // Smooth the base:
  if(smoothing)
  {
    base = base.contract(4, draft? 4:16);
    base = base.expand(4, draft? 4:16);
  }
  
  // Subtract the connector and cable:
  base = base.subtract(iphone).subtract(plug).subtract(cablecutout).subtract(gapForUsbPlug);
  
  // add mouse ear:
  if(params.mouseear == 1)
  {
    var mouseearpoint = new CSG.Vector3D(0, y3, 0);
    var mouseearthickness = 0.5;
    var mouseearradius = 15;
    var mouseear = CSG.cylinder({
      start: mouseearpoint, 
      end: mouseearpoint.plus(new CSG.Vector3D(0, 0, mouseearthickness)),
      radius: mouseearradius,
      resolution: 16
    });
    base = base.union(mouseear);     
  }
  
  // center:
  var basecenter = base.getBounds()[0].plus(base.getBounds()[1]).times(0.5);
  base = base.translate(basecenter.negated());
  
  return base;
}

///////////////////// 
function getIphoneDockConnector(margin, resolution)
{
  margin = new CSG.Vector3D(margin);
  var dockConnectorSize = new CSG.Vector3D([26.2, 5.7, 9.5]).plus(margin.times(2));  
  var dockConnector = CSG.cube({radius: [(dockConnectorSize.x-dockConnectorSize.y)/2, dockConnectorSize.y/2, dockConnectorSize.z/2]});
  dockConnector = dockConnector.union(CSG.cylinder({
    start: [(dockConnectorSize.x-dockConnectorSize.y)/2, 0, -dockConnectorSize.z/2],
    end: [(dockConnectorSize.x-dockConnectorSize.y)/2, 0, dockConnectorSize.z/2],
    radius: dockConnectorSize.y/2,
    resolution: resolution
  }));
  dockConnector = dockConnector.union(CSG.cylinder({
    start: [-(dockConnectorSize.x-dockConnectorSize.y)/2, 0, -dockConnectorSize.z/2],
    end: [-(dockConnectorSize.x-dockConnectorSize.y)/2, 0, dockConnectorSize.z/2],
    radius: dockConnectorSize.y/2,
    resolution: resolution
  }));
  var cableTube = CSG.cylinder({
    start: [0, 0, -dockConnectorSize.z/2-5.70-margin.z],
    end: [0, 0, -dockConnectorSize.z/2],
    radius: 2.25+margin.y,
    resolution: resolution
  }); 
  dockConnector = dockConnector.union(cableTube);
  
  // Add CSG.Connector properties:
  dockConnector.properties.iphoneConnector = dockConnector.properties.cube.facecenters[4];
  dockConnector.properties.cableConnector = cableTube.properties.cylinder.start;
    
  return dockConnector;
}

</t>
<t tx="2014pythonE.20140420143435.2032">// title: Lookup()
// author: OpenSCAD.org, adapted by Rene K. Mueller
// description: testing lookup() function 

// from http://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Mathematical_Functions

function get_cylinder_h(p) { 
   return lookup(p, [
                [ -200, 5 ],
                [ -50, 20 ],
                [ -20, 18 ],
                [ +80, 25 ],
                [ +150, 2 ]
        ]);
}

function main() { 
   var w = new Array();
   for (var i =-100; i&lt;=100; i+=5) {
      //echo(i, get_cylinder_h(i));
      w.push( translate([ i, 0, -30 ], 
         cylinder({r1: 2, r2: 2, h: get_cylinder_h(i)*3, fn: 16})).
            setColor(hsl2rgb(((i+100)/200)*0.3+0.6,1,0.5)));
   }
   return w;
}</t>
<t tx="2014pythonE.20140420143435.2033">// title: Name Plate
// author: Rene K. Mueller
// date: 2013/04/24
// description: create your own name plate
// license: MIT License

function getParameterDefinitions() {
   return [
      { name: 'name', initial: "Joe Example", type: 'text', caption: 'Your name', size: 30 },
      { name: 'title', initial: "3D Printer Developer", type: 'text', caption: 'Your title', size: 30 },
      { name: 'thickness', initial: 3, type: 'float', caption: 'Thickness' }
   ];
}

function main(param) {
   var o = [];    // our stack of objects
   var l = [];    // our stack of line segments (when rendering vector text)
   var p = [];    // our stack of extruded line segments
   
   // -- render name &amp; extrude
   l = vector_text(0,0,param.name);
   l.forEach(function(s) {                
      p.push(rectangular_extrude(s, { w:param.thickness, h:param.thickness }));
   });
   o.push(union(p).setColor([1,1,0]).scale([1/3,1/3,1/3]).center([true,true,false]).translate([0,0,param.thickness]));

   if(param.title.length) {
      // -- render title &amp; extrude
      l = vector_text(0,0,param.title); p = [];
      l.forEach(function(s) {                
         p.push(rectangular_extrude(s, { w:param.thickness, h:param.thickness }));
      });
      o.push(union(p).setColor([1,1,0]).scale([1/8,1/8,1/3]).center([true,true,false]).translate([0,-8,param.thickness]));
   }
   o = [union(o)];      // neat: we combine name + title, and make it first entry of an array
   
   {  // -- adding a plate underneath
      var b = o[0].getBounds();
      var m = 2;
      var w = b[1].x-b[0].x+m*2;
      var h = b[1].y-b[0].y+m*2;
      o.push(cube({size: [w,h,param.thickness], round: true, radius: 0.5}).translate([b[0].x-m,b[0].y-m,0]));
   }
   return union(o);
}</t>
<t tx="2014pythonE.20140420143435.2034">// title: Polyhedron()
// author: OpenSCAD.org, adapted by Rene K. Mueller

function main() {
   return polyhedron({ 
         points: [
               [0, -10, 60], [0, 10, 60], [0, 10, 0], [0, -10, 0], [60, -10, 60], [60, 10, 60], 
               [10, -10, 50], [10, 10, 50], [10, 10, 30], [10, -10, 30], [30, -10, 50], [30, 10, 50]
               ], 
         triangles: [
                  [0,3,2],  [0,2,1],  [4,0,5],  [5,0,1],  [5,2,4],  [4,2,3],
                  [6,8,9],  [6,7,8],  [6,10,11],[6,11,7], [10,8,11],
                  [10,9,8], [3,0,9],  [9,0,6],  [10,6, 0],[0,4,10],
                  [3,9,10], [3,10,4], [1,7,11], [1,11,5], [1,8,7],  
                  [2,8,1],  [8,2,11], [5,11,2]
                  ]
      });
}
</t>
<t tx="2014pythonE.20140420143435.2035">// title: Primitives
// author: Rene K. Mueller
// license: MIT License

function main() {
   var o = [
      cube(),
      cube({size: [1,2,3]}),
      cube({round:true}),
      cube({size: [1,2,3], round:true}),
      sphere(),
      sphere({fn:8}),
      cylinder({r: 1, h: 10}),
      cylinder({r: 1, h: 10, round: true}),
      cylinder({r1: 3, r2: 0, h: 10}),
      cylinder({start: [0,0,0], end: [3,3,10], r: 1}),
      torus({ri: 0.5, ro: 2}),
      torus({ri: 0.1, ro: 2})
   ];
   for(var i=0; i&lt;o.length; i++) {
      o[i] = o[i].translate([(i%4-2)*6,Math.floor(i/4-2)*6,0]);
   }
   return o;
}
</t>
<t tx="2014pythonE.20140420143435.2036">// title: Rectangular_extrude()
// author: Rene K. Mueller
// license: MIT License

function main() {
   return [
      // openscade like
      rectangular_extrude([ [0,0], [10,0], [5,10], [0,10] ], { closed: true} ),
      rectangular_extrude([ [0,0], [10,0], [5,10], [0,10] ], {w: 1, h: 3, fn: 1, closed: false}).translate([0,15,0]),

      // object-oriented
      new CSG.Path2D([ [10,10], [-10,10], [-20,0], [-10,-10], [10,-10] ], /*closed=*/true).
         rectangularExtrude(/*w=*/1, /*h=*/3, /*res=*/10, /*round=*/true).translate([0,-15,0])
   ];
}
</t>
<t tx="2014pythonE.20140420143435.2037">// title: Rotate_extrude()
// author: Rene K. Mueller
// license: MIT License

function main() {
   return [
      // openscad-like
      rotate_extrude(translate([4,0,0],circle({r: 1, fn: 30, center: true}))),
      rotate_extrude({fn: 5},
         translate([4,0,0],circle({r: 1, fn: 30, center: true}))).translate([0,10,0]),
      rotate_extrude({fn: 30},
         translate([4,0,0],circle({r: 1, fn: 5, center: true}))).translate([0,20,0]),

      // openjscad-openscad mixed
      rotate_extrude({fn: 4}, square({size: [1,1], center: true}).translate([4,0,0]) ).translate([-10,0,0]),
      rotate_extrude({fn: 4}, square({size: [1,3], center: true}).translate([4,0,0]) ).translate([-20,0,0]),
      rotate_extrude({fn: 3}, square({size: [2,0.5], center: true}).translate([4,0,0]) ).translate([-20,10,0]),
      rotate_extrude({fn: 5}, square({size: [1,1], center: true}).translate([4,0,0]) ).translate([-20,20,0]),
      
      rotate_extrude(polygon({points:[[0,0],[2,1],[1,2],[1,3],[3,4],[0,5]]})).translate([10,0,0]),
      rotate_extrude({fn:4},polygon({points:[[0,0],[2,1],[1,2],[1,3],[3,4],[0,5]]})).translate([18,0,0])
   ];
}
</t>
<t tx="2014pythonE.20140420143435.2038">// title: Rounded Cube

function getParameterDefinitions() {
  return [
    { name: 'width', type: 'float', default: 10, caption: "Width:" },
    { name: 'height', type: 'float', default: 14, caption: "Height:" },
    { name: 'depth', type: 'float', default: 7, caption: "Depth:" },
    { name: 'rounded', type: 'choice', caption: 'Round the corners', values: [0, 1], captions: ["No", "Yes"], default: 1 },
  ];
}

function main(params) {
  var result;
  if(params.rounded == 1) {
    result = CSG.roundedCube({radius: [params.width, params.height, params.depth], roundradius: 2, resolution: 8});
  } else {
    result = CSG.cube({radius: [params.width, params.height, params.depth]});
  }
  return result;
}</t>
<t tx="2014pythonE.20140420143435.2039">// title: Torus()
// author: Rene K. Mueller
// license: MIT License

function main() {
   return [
      torus(),
      torus({ ri:0.5, fni: 8}).translate([0,10,0]),
   
      torus({ fni:4 }).translate([-10,0,0]),
      torus({ fni:4,roti:45 }).translate([-10,10,0]),
      torus({ fni:4,fno:4,roti:45 }).translate([-10,20,0]),
      torus({ fni:4,fno:5,roti:45 }).translate([-10,30,0]),

      torus({ fno:8 }).translate([10,0,0]),
      torus({ fno:4 }).translate([20,0,0]),
      torus({ fno:3 }).translate([30,0,0])
   ];
}
</t>
<t tx="2014pythonE.20140420143435.2040">// title: Transparency
// author: Rene K. Mueller
// description: showing transparent objects

function main() {
   var o = [];
   for(var i=7; i&gt;=0; i--) {     // reverse order for seeing through all cylinders (see http://www.opengl.org/wiki/Transparency_Sorting)
      o.push(cylinder({r:3,h:20}).
         setColor( 
            hsl2rgb(i/8,1,0.5).  // hsl to rgb, creating rainbow [r,g,b]
            concat(1/8+i/8)      // and add to alpha to make it [r,g,b,a]
         ).translate([(i-3)*7.5,0,0])
      );
   }
   o.push(color("red",cube(5)).translate([-4,-10,0]));
   o.push(color("red",0.5,cube(5)).translate([4,-10,0]));
   return o;
}
</t>
<t tx="2014pythonE.20140420143435.2041">// title: Transparency 2
// author: Rene K. Mueller
// description: showing transparent objects

function main() {
   return [
      difference(
         sphere(2),
         union(
            cylinder({h: 6, center: true}),
            cylinder({h: 6, center: true}).rotateY(90),
            cylinder({h: 6, center: true}).rotateX(90)
         )
      ).scale(10),
      union(
         cylinder({h: 6, center: true}),
         cylinder({h: 6, center: true}).rotateY(90),
         cylinder({h: 6, center: true}).rotateX(90)
      ).scale(10).setColor(1,1,0,0.5)
   ];
}</t>
<t tx="2014pythonE.20140420143435.2042">// title: Umbilical Torus generator
// author: Bruce Mueller 
// date: 2013/03/30 
// license: Creative Commons CC BY-SA
// description: adapted for OpenJSCAD.org by Rene K. Mueller 2013/03/30

// inc = incremental segments
// r = radius of circle
// t = 'radius' of triangle -distance from center to vertex
// a = angle of rotation of triangle
// b = angle rotation around center of circle

function tri(r,t,a,b) { return [(r + t*sin(a))*cos(b), (r+ t*sin(a))*sin(b), t*cos(a)]; }

// module to generate a rotated triangle slice, inc degrees wide
// (could not implement this in the for loop below)

function wedge(r,t,i,inc) {
	var a1 = tri(r,t,i/3,i);
	var b1 = tri(r,t,120+i/3,i);
	var c1 = tri(r,t,240+i/3,i);
	j = i+inc;
	var a2 = tri(r,t,j/3,j);
	var b2 = tri(r,t,120+j/3,j);
	var c2 = tri(r,t,240+j/3,j);
	
	return polyhedron({
		points: [a1,b1,c1,a2,b2,c2],
		triangles: [ [0,1,2], [5,4,3], 
			[3,4,0], [1,0,4],
			[3,0,2], [3,2,5],
			[5,2,4], [4,2,1] ] });
}


// created a conjoined set of triangular wedges around the circle


function main() {
   var inc = 10;
   var o = [];

   for(var i=0; i&lt;360; i+=inc) {
      o.push(wedge(2,1,i,inc));
   }
   return union(o).scale(10);        // would be more effectice &amp; suitable to create just one polyhedron
}</t>
<t tx="2014pythonE.20140420143435.2043">


var w = new Array();


function roundedBox(width, height, depth, radius){

	  var size=new CSG.Vector3D(width, height, depth);
	  var r1 = new CSG.Vector3D(2*radius, 0, 0);
	  var r2 = new CSG.Vector3D(0,2*radius,0);
	  var size_r1 = size.minus(r1);
	  var size_r2 = size.minus(r2)
	  var rb = new Array();
	  rb.push(cube({size: [size_r1.x,size_r1.y,size_r1.z], center:true}));
	  rb.push(cube({size: [size_r2.x,size_r2.y,size_r2.z], center:true}));
	  rb.push(cylinder({r:radius, h:size.z, center:true}).translate([ radius-size.x/2,-radius+size.y/2,0]));
	  rb.push(cylinder({r:radius, h:size.z, center:true}).translate([ -radius+size.x/2,-radius+size.y/2,0]));
	  rb.push(cylinder({r:radius, h:size.z, center:true}).translate([ radius-size.x/2,radius-size.y/2,0]));
	  rb.push(cylinder({r:radius, h:size.z, center:true}).translate([ -radius+size.x/2,radius-size.y/2,0]));
	  return union(rb);
}

function eye(radius,rotation) {
   
	var s1 = sphere({r:radius}).setColor(1,1,1);
	var s2 = sphere({r:radius*0.1}).setColor("black").translate([0,-radius,0]);
	
    return difference(s1, s2).rotateX(rotation);

}

function mouth(width,height,angle){
	
	//var mbox = cube({size:[width, height, height/2.0], round: true});

	var mbox = roundedBox(width,height,height/2.0,height/5.0);
	return mbox.setColor(0,0,1).rotateX(90+angle);
	
}

function arm(width,height){
    var a2 = union(
			cylinder({r:width,h:height}),
			sphere({r:width}).translate([0,0,height])
		).rotateY(90);
	return union(
		cylinder({r:width,h:height}),
	    sphere({r:width}).translate([0,0,height]),
		a2.translate([0,0,height])
	).rotateY(-90);
}




function body(width_top, width_bottom,height,depth_top, depth_bottom,arm_width ,arm_length){
	var poly = polyhedron({points:[ [-width_bottom/2.0, -depth_bottom/2.0, 0], 
					   [width_bottom/2.0, -depth_bottom/2.0, 0],
                         [width_top/2.0,  -depth_top/2.0, height], 
                         [-width_top/2.0,  -depth_top/2.0, height],
					  [-width_bottom/2.0, depth_bottom/2.0, 0], 				
                         [width_bottom/2.0, depth_bottom/2.0, 0], 
                         [width_top/2.0,  depth_top/2.0, height], 
                         [-width_top/2.0,  depth_top/2.0, height],],
	           triangles: [ [3,2,0], [2,1,0], // front
                             [4,6,7], [4,5,6], // back
                             [0,5,4], [0,1,5], // bottom
                             [7,3,4], [3,0,4], // left
                             [6,2,3],  [7,6,3], // top
                             [2,6,1], [5,1,6] // right
                             ]});
							 poly.setColor(0,1,0);
	return union(
				poly,
				roundedBox(width_top, width_top/3, depth_top, depth_top/5 ).rotateX(90).translate([0,0,height]),
				//cube({ size: [width_top, width_top/3, depth_top], round:true}).rotateX(90).translate([-width_top/2.0,depth_top/2.0,height*0.95]),
				arm(arm_width,arm_length).translate([-width_bottom/2.0 + (width_bottom-width_top) ,0, height / 1.5]),
				arm(arm_width,arm_length).translate([-width_bottom/2.0 + (width_bottom-width_top) ,0, height / 2.5]).rotateX(180).rotateY(180)
			).setColor(0,1,0);
}


function getParameterDefinitions(){
	return [

		{name: 'body_height', type: 'float', initial: 48.0, caption: "Height of the companion"},
		{name: 'body_width_top',type: 'float', initial: 20.0, caption: "Width of the head"},
		{name: 'body_width_bottom',type: 'float', initial: 23.0, caption: "Width of the base"},
		{name: 'body_depth_top',type: 'float', initial: 10.0, caption: "Depth of the head"},
		{name: 'body_depth_bottom',type: 'float', initial: 16.0, caption: "Width of the base"},
		{name: 'body_arm_width',type: 'float', initial: 3.0, caption: "Size of the arm"},
		{name: 'body_arm_length',type: 'float', initial: 13.0, caption: "Length of the arm segments"},
		{name: 'eye_radius',type: 'float', initial: 5.0, caption: "Radius of the eyeball"},
		{name: 'eye_position',type: 'float', initial: 0.80, caption: "Position of the eyeball %"},
		{name: 'eye_rotation',type: 'float', initial: -10.0, caption: "Rotation of the eyeball (top-down)"},
		{name: 'mouth_position',type: 'float', initial: 0.50, caption: "Mouth position %"},
		{name: 'mouth_width',type: 'float', initial: 14.0, caption: "Width of the mouth"},
		{name: 'mouth_height',type: 'float', initial: 5.0, caption: "Height of the mouth"},
		{name: 'body_rotation', type: 'float', initial: 0, caption: "Body rotation"},
		
		
];
}


function main(params){
	
	var body_height= params.body_height; //48.0;
	var body_width_top= params.body_width_top;// 20.0;
	var body_width_bottom=params.body_width_bottom;//23.0;
	var body_depth_top=params.body_depth_top;//10.0;
	var body_depth_bottom=params.body_depth_bottom;//16.0;
	var body_arm_width=params.body_arm_width;//3.0;
	var body_arm_length=params.body_arm_length;//13.0;
	var eye_radius=params.eye_radius;//5.0;
	var eye_position=params.eye_position;//0.80;
	var eye_rotation=params.eye_rotation;//-10;
	var mouth_position=params.mouth_position;//0.50;
	var mouth_width=params.mouth_width;//14.0;
	var mouth_height=params.mouth_height;//5;
	var body_rotation=params.body_rotation;
	
	
	w.push(body(body_width_top, body_width_bottom,body_height, body_depth_top, body_depth_bottom, body_arm_width,body_arm_length ));
	w.push(eye(eye_radius,eye_rotation).translate([0,-body_width_top/4.0,body_height*eye_position])) ;
	w.push(mouth(mouth_width,mouth_height,-3*mouth_position ).translate([0, -body_depth_bottom/2.5, body_height*mouth_position]));
	return union(w).rotateZ(params.body_rotation);
}</t>
<t tx="2014pythonE.20140424170033.3315">We need a new mechanism to identify page, right now we use heading to identify different page content, this will end up with no duplicated page heading allowed.

If we gave each page a unique number, and save these numbers in a seperated file to incorporate with content.htm, may we solve the no duplicated page heading allowed problem?

Or should we seperate the edit mode and read mode, under edit mode heading order is used to identify the page, and after editing pure html will be generated for user and search engine reading.

Page template can be imposed into action during the site html generation period.</t>
<t tx="2014spring.20140605210826.1877">2014.06.06 以並列重複標題的方式來解決問題
而重複標題頁面的編輯則自動跳轉到所有頁面編輯畫面, 讓使用者決定要如何處理.

有無可能, 使用者可以透過 page_order 單獨編輯特定的重複標題頁面?

We need custom error pages!

2014.06.10 處理 edit_page 儲存空白 content.htm 時之後的 parse 錯誤

2014.07.06 擬解決 /brython 查詢關鍵字使用流程所產生的錯誤

2014.09.08 頁面標題有 + 特殊符號時產生錯誤</t>
<t tx="cmsxh.20131226100304.3660"></t>
<t tx="cmsxh.20131226100304.3770">Ultrasimple Content Management System

V. 0.14 - add uploaded files deletion
V. 0.15 - ready for git remote add to bitbucket
V. 0.16 - change language to English</t>
<t tx="cmsxh.20131226100304.3820"></t>
<t tx="cmsxh.20131226100304.5349"></t>
<t tx="cmsxh.20131226100304.5350">QSplitter::handle {
    background-color: #CAE1FF; /* lightSteelBlue1 */
}

QStackedWidget {
    /* background-color:lightpink; */
    border-color: red;
    padding: 0px;
    /* border-width: 0px; */
    /* background-color: yellow; */
}

QSplitter {
    border-color: white;
    background-color: white;
    border-style: solid;
}

QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="cmsxh.20131226100304.5351">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="cmsxh.20131226100304.5424">Hope to provide a way for multiple files selection and delete

To delete files, double confirmation is needed

Procedure:

1. add html form for download_list method, one seleciton for each file, as well as providing to send to delete confirmation method.

2. confirmation method list all the to be deleted files, and ask for delete confirmation, is yes for deletion, all the listed files will be delete.

3. for safety of data management, all deleted files should be moved to the garbage files to timed final deletion.
</t>
<t tx="cmsxh.20131226100304.5425">The file format allowed for upload:

1. general files, including 7z, zip and pdf files.

2. graphics files, including png, jpg, gif files.

3. video files, including flv files.

4. audio files, including mp3 files.

5. parts files, including stl, Creo part and assembly, Solvespace files, Solid Edge files.</t>
<t tx="cmsxh.20131226100304.5426">textile library are used to generated sitemap and tree menu unordeded list.

Due to the efficiency problem, textile is not used anymore, custom "render_menu" method is used.</t>
<t tx="cmsxh.20140101145643.1604">Copyright © 2014 Chiaming Yen

CMSimply is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CMSimply is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CMSimply. If not, see &lt;http://www.gnu.org/licenses/&gt;.</t>
<t tx="cmsxh.20140108172857.2428">version on public-cmsimply.rhcloud.com
</t>
<t tx="cmsxh.20140212132226.1610">1. in SSL mode no arrow for menu - modified to use local jquery.js file

2. Brython editor can not save a 700-line program - it is the mailformated URI problem not the timeout problem.

3. upload file will write on top of the duplicated file, in stead of create a new file. (a bug need to fix)

4. duplicated page title problem need to deal with.



</t>
<t tx="cmsxh.20140212132226.1611">add images directory file list

when administrator press list image file button, system will check if thumb images are exist or not, the list will show thum image file and press to view original image file.

We may also want to delete image files.</t>
<t tx="cmsxh.20140212132226.1612">see if we need to delete all the tmp session files after logout</t>
</tnodes>
</leo_file>
